generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  OWNER
  MEMBER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum PlanType {
  FREE
  STARTER
  PRO
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String             @unique
  plan      PlanType           @default(FREE)
  status    SubscriptionStatus @default(ACTIVE)
  startedAt DateTime           @default(now())
  expiresAt DateTime?
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}



model Site {
  id          String    @id @default(cuid())
  name        String
  description String?
  subdomain   String?   @unique
  workspaceId String
  workspace   Organization @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  posts       Post[]
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("site")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  coverImage  String?
  contentJson Json
  description String
  siteId      String
  site        Site       @relation(fields: [siteId], references: [id])
  views       Int        @default(0)
  slug        String
  authorId    String
  status      PostStatus @default(DRAFT)
  featured    Boolean    @default(false)
  tags        Tag[]
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id])

  @@unique([siteId, slug])
  @@map("post")
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, name, slug])
  @@map("tag")
}

// auth-related models

model User {
  id            String       @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  posts         Post[]
  invitations   Invitation[]
  subscription  Subscription?

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  slug        String
  logo        String?
  metadata    String?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  sites       Site[]
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("workspace")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
