generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  OWNER
  MEMBER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum PlanType {
  FREE
  STARTER
  PRO
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String            @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  posts                Post[]
  workspaces           Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]
  invites              Invite[]
  subscription         Subscription?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String             @unique
  plan      PlanType           @default(FREE)
  status    SubscriptionStatus @default(ACTIVE)
  startedAt DateTime           @default(now())
  expiresAt DateTime?
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  slug        String            @unique
  ownerId     String
  members     WorkspaceMember[]
  sites       Site[]
  invites     Invite[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        RoleType  @default(MEMBER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Site {
  id          String    @id @default(cuid())
  name        String
  description String?
  subdomain   String?   @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  posts       Post[]
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  coverImage  String?
  contentJson Json
  description String
  siteId      String
  site        Site       @relation(fields: [siteId], references: [id])
  views       Int        @default(0)
  slug        String
  authorId    String
  status      PostStatus @default(DRAFT)
  featured    Boolean    @default(false)
  tags        Tag[]
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id])

  @@unique([siteId, slug])
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, name, slug])
}

model Invite {
  id          String       @id @default(cuid())
  email       String // Email of the invitee
  workspaceId String
  inviterId   String // User who sent the invite
  role        RoleType     @default(MEMBER) // Role assigned upon acceptance
  status      InviteStatus @default(PENDING) // PENDING, ACCEPTED, DECLINED
  expiresAt   DateTime

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter   User      @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// auth-related models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
